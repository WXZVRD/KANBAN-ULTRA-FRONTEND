import { type NextRequest, NextResponse } from 'next/server'

export default function middleware(request: NextRequest) {
	const { url, cookies } = request

	console.log('üì© [Middleware] –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:', {
		url,
		cookies: cookies.getAll().map(c => ({ name: c.name, value: c.value }))
	})

	const session: string | undefined = cookies.get('session')?.value
	console.log('üîë [Middleware] –ó–Ω–∞—á–µ–Ω–∏–µ session:', session)

	const isAuthPage: boolean = url.includes('/auth')
	console.log('üìç [Middleware] –≠—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏?', isAuthPage)

	if (isAuthPage) {
		if (session) {
			console.log(
				'‚úÖ [Middleware] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /dashboard/settings'
			)
			return NextResponse.redirect(new URL('/dashboard/settings', url))
		}

		console.log(
			'‚ÑπÔ∏è [Middleware] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É /auth/*'
		)
		return NextResponse.next()
	}

	if (!session) {
		console.log('üö´ [Middleware] –ù–µ—Ç session, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ /auth/login')
		return NextResponse.redirect(new URL('/auth/login', url))
	}

	console.log(
		'‚úÖ [Middleware] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
	)
	return NextResponse.next()
}

export const config = {
	matcher: ['/auth/:path*', '/dashboard/:path*']
}
